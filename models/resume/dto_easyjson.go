// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package resume

import (
	json "encoding/json"
	models "github.com/go-park-mail-ru/2020_2_MVVM.git/models/models"
	uuid "github.com/google/uuid"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson56de76c1DecodeGithubComGoParkMailRu20202MVVMGitApplicationResume(in *jlexer.Lexer, out *SearchParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "keywords":
			if in.IsNull() {
				in.Skip()
				out.KeyWords = nil
			} else {
				if out.KeyWords == nil {
					out.KeyWords = new(string)
				}
				*out.KeyWords = string(in.String())
			}
		case "salary_min":
			if in.IsNull() {
				in.Skip()
				out.SalaryMin = nil
			} else {
				if out.SalaryMin == nil {
					out.SalaryMin = new(int)
				}
				*out.SalaryMin = int(in.Int())
			}
		case "salary_max":
			if in.IsNull() {
				in.Skip()
				out.SalaryMax = nil
			} else {
				if out.SalaryMax == nil {
					out.SalaryMax = new(int)
				}
				*out.SalaryMax = int(in.Int())
			}
		case "gender":
			if in.IsNull() {
				in.Skip()
				out.Gender = nil
			} else {
				in.Delim('[')
				if out.Gender == nil {
					if !in.IsDelim(']') {
						out.Gender = make([]string, 0, 4)
					} else {
						out.Gender = []string{}
					}
				} else {
					out.Gender = (out.Gender)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Gender = append(out.Gender, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "education_level":
			if in.IsNull() {
				in.Skip()
				out.EducationLevel = nil
			} else {
				in.Delim('[')
				if out.EducationLevel == nil {
					if !in.IsDelim(']') {
						out.EducationLevel = make([]string, 0, 4)
					} else {
						out.EducationLevel = []string{}
					}
				} else {
					out.EducationLevel = (out.EducationLevel)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.EducationLevel = append(out.EducationLevel, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "career_level":
			if in.IsNull() {
				in.Skip()
				out.CareerLevel = nil
			} else {
				in.Delim('[')
				if out.CareerLevel == nil {
					if !in.IsDelim(']') {
						out.CareerLevel = make([]string, 0, 4)
					} else {
						out.CareerLevel = []string{}
					}
				} else {
					out.CareerLevel = (out.CareerLevel)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.CareerLevel = append(out.CareerLevel, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "experience_month":
			if in.IsNull() {
				in.Skip()
				out.ExperienceMonth = nil
			} else {
				in.Delim('[')
				if out.ExperienceMonth == nil {
					if !in.IsDelim(']') {
						out.ExperienceMonth = make([]int, 0, 8)
					} else {
						out.ExperienceMonth = []int{}
					}
				} else {
					out.ExperienceMonth = (out.ExperienceMonth)[:0]
				}
				for !in.IsDelim(']') {
					var v4 int
					v4 = int(in.Int())
					out.ExperienceMonth = append(out.ExperienceMonth, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "area_search":
			if in.IsNull() {
				in.Skip()
				out.AreaSearch = nil
			} else {
				in.Delim('[')
				if out.AreaSearch == nil {
					if !in.IsDelim(']') {
						out.AreaSearch = make([]string, 0, 4)
					} else {
						out.AreaSearch = []string{}
					}
				} else {
					out.AreaSearch = (out.AreaSearch)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.AreaSearch = append(out.AreaSearch, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComGoParkMailRu20202MVVMGitApplicationResume(out *jwriter.Writer, in SearchParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"keywords\":"
		out.RawString(prefix[1:])
		if in.KeyWords == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.KeyWords))
		}
	}
	{
		const prefix string = ",\"salary_min\":"
		out.RawString(prefix)
		if in.SalaryMin == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.SalaryMin))
		}
	}
	{
		const prefix string = ",\"salary_max\":"
		out.RawString(prefix)
		if in.SalaryMax == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.SalaryMax))
		}
	}
	{
		const prefix string = ",\"gender\":"
		out.RawString(prefix)
		if in.Gender == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Gender {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"education_level\":"
		out.RawString(prefix)
		if in.EducationLevel == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.EducationLevel {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"career_level\":"
		out.RawString(prefix)
		if in.CareerLevel == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.CareerLevel {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.String(string(v11))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"experience_month\":"
		out.RawString(prefix)
		if in.ExperienceMonth == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.ExperienceMonth {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v13))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"area_search\":"
		out.RawString(prefix)
		if in.AreaSearch == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.AreaSearch {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComGoParkMailRu20202MVVMGitApplicationResume(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComGoParkMailRu20202MVVMGitApplicationResume(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComGoParkMailRu20202MVVMGitApplicationResume(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComGoParkMailRu20202MVVMGitApplicationResume(l, v)
}
func easyjson56de76c1DecodeGithubComGoParkMailRu20202MVVMGitApplicationResume1(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "resume":
			(out.Resume).UnmarshalEasyJSON(in)
		case "user":
			easyjson56de76c1DecodeGithubComGoParkMailRu20202MVVMGitApplicationModels(in, &out.User)
		case "education":
			if in.IsNull() {
				in.Skip()
				out.Educations = nil
			} else {
				in.Delim('[')
				if out.Educations == nil {
					if !in.IsDelim(']') {
						out.Educations = make([]models.Education, 0, 0)
					} else {
						out.Educations = []models.Education{}
					}
				} else {
					out.Educations = (out.Educations)[:0]
				}
				for !in.IsDelim(']') {
					var v16 models.Education
					easyjson56de76c1DecodeGithubComGoParkMailRu20202MVVMGitApplicationModels1(in, &v16)
					out.Educations = append(out.Educations, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "custom_experience":
			if in.IsNull() {
				in.Skip()
				out.CustomExperience = nil
			} else {
				in.Delim('[')
				if out.CustomExperience == nil {
					if !in.IsDelim(']') {
						out.CustomExperience = make([]models.ExperienceCustomComp, 0, 0)
					} else {
						out.CustomExperience = []models.ExperienceCustomComp{}
					}
				} else {
					out.CustomExperience = (out.CustomExperience)[:0]
				}
				for !in.IsDelim(']') {
					var v17 models.ExperienceCustomComp
					easyjson56de76c1DecodeGithubComGoParkMailRu20202MVVMGitApplicationModels2(in, &v17)
					out.CustomExperience = append(out.CustomExperience, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_favorite":
			if in.IsNull() {
				in.Skip()
				out.IsFavorite = nil
			} else {
				if out.IsFavorite == nil {
					out.IsFavorite = new(uuid.UUID)
				}
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((*out.IsFavorite).UnmarshalText(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComGoParkMailRu20202MVVMGitApplicationResume1(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"resume\":"
		out.RawString(prefix[1:])
		(in.Resume).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		easyjson56de76c1EncodeGithubComGoParkMailRu20202MVVMGitApplicationModels(out, in.User)
	}
	{
		const prefix string = ",\"education\":"
		out.RawString(prefix)
		if in.Educations == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v18, v19 := range in.Educations {
				if v18 > 0 {
					out.RawByte(',')
				}
				easyjson56de76c1EncodeGithubComGoParkMailRu20202MVVMGitApplicationModels1(out, v19)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"custom_experience\":"
		out.RawString(prefix)
		if in.CustomExperience == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.CustomExperience {
				if v20 > 0 {
					out.RawByte(',')
				}
				easyjson56de76c1EncodeGithubComGoParkMailRu20202MVVMGitApplicationModels2(out, v21)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"is_favorite\":"
		out.RawString(prefix)
		if in.IsFavorite == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.IsFavorite).MarshalText())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Response) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComGoParkMailRu20202MVVMGitApplicationResume1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComGoParkMailRu20202MVVMGitApplicationResume1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Response) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComGoParkMailRu20202MVVMGitApplicationResume1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComGoParkMailRu20202MVVMGitApplicationResume1(l, v)
}
func easyjson56de76c1DecodeGithubComGoParkMailRu20202MVVMGitApplicationModels2(in *jlexer.Lexer, out *models.ExperienceCustomComp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "cand_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.CandID).UnmarshalText(data))
			}
		case "resume_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ResumeID).UnmarshalText(data))
			}
		case "name_job":
			out.NameJob = string(in.String())
		case "position":
			if in.IsNull() {
				in.Skip()
				out.Position = nil
			} else {
				if out.Position == nil {
					out.Position = new(string)
				}
				*out.Position = string(in.String())
			}
		case "begin":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Begin).UnmarshalJSON(data))
			}
		case "finish":
			if in.IsNull() {
				in.Skip()
				out.Finish = nil
			} else {
				if out.Finish == nil {
					out.Finish = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Finish).UnmarshalJSON(data))
				}
			}
		case "duties":
			if in.IsNull() {
				in.Skip()
				out.Duties = nil
			} else {
				if out.Duties == nil {
					out.Duties = new(string)
				}
				*out.Duties = string(in.String())
			}
		case "continue_to_today":
			if in.IsNull() {
				in.Skip()
				out.ContinueToToday = nil
			} else {
				if out.ContinueToToday == nil {
					out.ContinueToToday = new(bool)
				}
				*out.ContinueToToday = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComGoParkMailRu20202MVVMGitApplicationModels2(out *jwriter.Writer, in models.ExperienceCustomComp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"cand_id\":"
		out.RawString(prefix)
		out.RawText((in.CandID).MarshalText())
	}
	{
		const prefix string = ",\"resume_id\":"
		out.RawString(prefix)
		out.RawText((in.ResumeID).MarshalText())
	}
	{
		const prefix string = ",\"name_job\":"
		out.RawString(prefix)
		out.String(string(in.NameJob))
	}
	{
		const prefix string = ",\"position\":"
		out.RawString(prefix)
		if in.Position == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Position))
		}
	}
	{
		const prefix string = ",\"begin\":"
		out.RawString(prefix)
		out.Raw((in.Begin).MarshalJSON())
	}
	{
		const prefix string = ",\"finish\":"
		out.RawString(prefix)
		if in.Finish == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Finish).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"duties\":"
		out.RawString(prefix)
		if in.Duties == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Duties))
		}
	}
	{
		const prefix string = ",\"continue_to_today\":"
		out.RawString(prefix)
		if in.ContinueToToday == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.ContinueToToday))
		}
	}
	out.RawByte('}')
}
func easyjson56de76c1DecodeGithubComGoParkMailRu20202MVVMGitApplicationModels1(in *jlexer.Lexer, out *models.Education) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.EdId).UnmarshalText(data))
			}
		case "cand_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.CandID).UnmarshalText(data))
			}
		case "resume_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ResumeId).UnmarshalText(data))
			}
		case "university":
			out.University = string(in.String())
		case "level":
			if in.IsNull() {
				in.Skip()
				out.Level = nil
			} else {
				if out.Level == nil {
					out.Level = new(string)
				}
				*out.Level = string(in.String())
			}
		case "begin":
			if in.IsNull() {
				in.Skip()
				out.Begin = nil
			} else {
				if out.Begin == nil {
					out.Begin = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Begin).UnmarshalJSON(data))
				}
			}
		case "finish":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Finish).UnmarshalJSON(data))
			}
		case "department":
			if in.IsNull() {
				in.Skip()
				out.Department = nil
			} else {
				if out.Department == nil {
					out.Department = new(string)
				}
				*out.Department = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComGoParkMailRu20202MVVMGitApplicationModels1(out *jwriter.Writer, in models.Education) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.EdId).MarshalText())
	}
	{
		const prefix string = ",\"cand_id\":"
		out.RawString(prefix)
		out.RawText((in.CandID).MarshalText())
	}
	{
		const prefix string = ",\"resume_id\":"
		out.RawString(prefix)
		out.RawText((in.ResumeId).MarshalText())
	}
	{
		const prefix string = ",\"university\":"
		out.RawString(prefix)
		out.String(string(in.University))
	}
	{
		const prefix string = ",\"level\":"
		out.RawString(prefix)
		if in.Level == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Level))
		}
	}
	{
		const prefix string = ",\"begin\":"
		out.RawString(prefix)
		if in.Begin == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Begin).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"finish\":"
		out.RawString(prefix)
		out.Raw((in.Finish).MarshalJSON())
	}
	{
		const prefix string = ",\"department\":"
		out.RawString(prefix)
		if in.Department == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Department))
		}
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		if in.Description == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Description))
		}
	}
	out.RawByte('}')
}
func easyjson56de76c1DecodeGithubComGoParkMailRu20202MVVMGitApplicationModels(in *jlexer.Lexer, out *models.User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "user_type":
			out.UserType = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "surname":
			out.Surname = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "phone":
			if in.IsNull() {
				in.Skip()
				out.Phone = nil
			} else {
				if out.Phone == nil {
					out.Phone = new(string)
				}
				*out.Phone = string(in.String())
			}
		case "social_network":
			if in.IsNull() {
				in.Skip()
				out.SocialNetwork = nil
			} else {
				if out.SocialNetwork == nil {
					out.SocialNetwork = new(string)
				}
				*out.SocialNetwork = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComGoParkMailRu20202MVVMGitApplicationModels(out *jwriter.Writer, in models.User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"user_type\":"
		out.RawString(prefix)
		out.String(string(in.UserType))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"surname\":"
		out.RawString(prefix)
		out.String(string(in.Surname))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		if in.Phone == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Phone))
		}
	}
	{
		const prefix string = ",\"social_network\":"
		out.RawString(prefix)
		if in.SocialNetwork == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.SocialNetwork))
		}
	}
	out.RawByte('}')
}
