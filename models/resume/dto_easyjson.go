// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package resume

import (
	json "encoding/json"
	models "github.com/go-park-mail-ru/2020_2_MVVM.git/models/models"
	uuid "github.com/google/uuid"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson56de76c1DecodeGithubComGoParkMailRu20202MVVMGitModelsResume(in *jlexer.Lexer, out *StartLimit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Start":
			if in.IsNull() {
				in.Skip()
				out.Start = nil
			} else {
				if out.Start == nil {
					out.Start = new(uint)
				}
				*out.Start = uint(in.Uint())
			}
		case "Limit":
			if in.IsNull() {
				in.Skip()
				out.Limit = nil
			} else {
				if out.Limit == nil {
					out.Limit = new(uint)
				}
				*out.Limit = uint(in.Uint())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComGoParkMailRu20202MVVMGitModelsResume(out *jwriter.Writer, in StartLimit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Start\":"
		out.RawString(prefix[1:])
		if in.Start == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.Start))
		}
	}
	{
		const prefix string = ",\"Limit\":"
		out.RawString(prefix)
		if in.Limit == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.Limit))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StartLimit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComGoParkMailRu20202MVVMGitModelsResume(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StartLimit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComGoParkMailRu20202MVVMGitModelsResume(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StartLimit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComGoParkMailRu20202MVVMGitModelsResume(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StartLimit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComGoParkMailRu20202MVVMGitModelsResume(l, v)
}
func easyjson56de76c1DecodeGithubComGoParkMailRu20202MVVMGitModelsResume1(in *jlexer.Lexer, out *SearchParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "keywords":
			if in.IsNull() {
				in.Skip()
				out.KeyWords = nil
			} else {
				if out.KeyWords == nil {
					out.KeyWords = new(string)
				}
				*out.KeyWords = string(in.String())
			}
		case "salary_min":
			if in.IsNull() {
				in.Skip()
				out.SalaryMin = nil
			} else {
				if out.SalaryMin == nil {
					out.SalaryMin = new(int)
				}
				*out.SalaryMin = int(in.Int())
			}
		case "salary_max":
			if in.IsNull() {
				in.Skip()
				out.SalaryMax = nil
			} else {
				if out.SalaryMax == nil {
					out.SalaryMax = new(int)
				}
				*out.SalaryMax = int(in.Int())
			}
		case "gender":
			if in.IsNull() {
				in.Skip()
				out.Gender = nil
			} else {
				in.Delim('[')
				if out.Gender == nil {
					if !in.IsDelim(']') {
						out.Gender = make([]string, 0, 4)
					} else {
						out.Gender = []string{}
					}
				} else {
					out.Gender = (out.Gender)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Gender = append(out.Gender, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "education_level":
			if in.IsNull() {
				in.Skip()
				out.EducationLevel = nil
			} else {
				in.Delim('[')
				if out.EducationLevel == nil {
					if !in.IsDelim(']') {
						out.EducationLevel = make([]string, 0, 4)
					} else {
						out.EducationLevel = []string{}
					}
				} else {
					out.EducationLevel = (out.EducationLevel)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.EducationLevel = append(out.EducationLevel, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "career_level":
			if in.IsNull() {
				in.Skip()
				out.CareerLevel = nil
			} else {
				in.Delim('[')
				if out.CareerLevel == nil {
					if !in.IsDelim(']') {
						out.CareerLevel = make([]string, 0, 4)
					} else {
						out.CareerLevel = []string{}
					}
				} else {
					out.CareerLevel = (out.CareerLevel)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.CareerLevel = append(out.CareerLevel, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "experience_month":
			if in.IsNull() {
				in.Skip()
				out.ExperienceMonth = nil
			} else {
				in.Delim('[')
				if out.ExperienceMonth == nil {
					if !in.IsDelim(']') {
						out.ExperienceMonth = make([]int, 0, 8)
					} else {
						out.ExperienceMonth = []int{}
					}
				} else {
					out.ExperienceMonth = (out.ExperienceMonth)[:0]
				}
				for !in.IsDelim(']') {
					var v4 int
					v4 = int(in.Int())
					out.ExperienceMonth = append(out.ExperienceMonth, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "area_search":
			if in.IsNull() {
				in.Skip()
				out.AreaSearch = nil
			} else {
				in.Delim('[')
				if out.AreaSearch == nil {
					if !in.IsDelim(']') {
						out.AreaSearch = make([]string, 0, 4)
					} else {
						out.AreaSearch = []string{}
					}
				} else {
					out.AreaSearch = (out.AreaSearch)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.AreaSearch = append(out.AreaSearch, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sphere":
			if in.IsNull() {
				in.Skip()
				out.Sphere = nil
			} else {
				in.Delim('[')
				if out.Sphere == nil {
					if !in.IsDelim(']') {
						out.Sphere = make([]int, 0, 8)
					} else {
						out.Sphere = []int{}
					}
				} else {
					out.Sphere = (out.Sphere)[:0]
				}
				for !in.IsDelim(']') {
					var v6 int
					v6 = int(in.Int())
					out.Sphere = append(out.Sphere, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "keywordsGeo":
			if in.IsNull() {
				in.Skip()
				out.KeywordsGeo = nil
			} else {
				if out.KeywordsGeo == nil {
					out.KeywordsGeo = new(string)
				}
				*out.KeywordsGeo = string(in.String())
			}
		case "StartLimit":
			(out.StartLimit).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComGoParkMailRu20202MVVMGitModelsResume1(out *jwriter.Writer, in SearchParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"keywords\":"
		out.RawString(prefix[1:])
		if in.KeyWords == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.KeyWords))
		}
	}
	{
		const prefix string = ",\"salary_min\":"
		out.RawString(prefix)
		if in.SalaryMin == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.SalaryMin))
		}
	}
	{
		const prefix string = ",\"salary_max\":"
		out.RawString(prefix)
		if in.SalaryMax == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.SalaryMax))
		}
	}
	{
		const prefix string = ",\"gender\":"
		out.RawString(prefix)
		if in.Gender == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.Gender {
				if v7 > 0 {
					out.RawByte(',')
				}
				out.String(string(v8))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"education_level\":"
		out.RawString(prefix)
		if in.EducationLevel == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.EducationLevel {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.String(string(v10))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"career_level\":"
		out.RawString(prefix)
		if in.CareerLevel == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.CareerLevel {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"experience_month\":"
		out.RawString(prefix)
		if in.ExperienceMonth == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.ExperienceMonth {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v14))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"area_search\":"
		out.RawString(prefix)
		if in.AreaSearch == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.AreaSearch {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.String(string(v16))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"sphere\":"
		out.RawString(prefix)
		if in.Sphere == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Sphere {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v18))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"keywordsGeo\":"
		out.RawString(prefix)
		if in.KeywordsGeo == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.KeywordsGeo))
		}
	}
	{
		const prefix string = ",\"StartLimit\":"
		out.RawString(prefix)
		(in.StartLimit).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComGoParkMailRu20202MVVMGitModelsResume1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComGoParkMailRu20202MVVMGitModelsResume1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComGoParkMailRu20202MVVMGitModelsResume1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComGoParkMailRu20202MVVMGitModelsResume1(l, v)
}
func easyjson56de76c1DecodeGithubComGoParkMailRu20202MVVMGitModelsResume2(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "resume":
			(out.Resume).UnmarshalEasyJSON(in)
		case "education":
			if in.IsNull() {
				in.Skip()
				out.Educations = nil
			} else {
				in.Delim('[')
				if out.Educations == nil {
					if !in.IsDelim(']') {
						out.Educations = make([]models.Education, 0, 0)
					} else {
						out.Educations = []models.Education{}
					}
				} else {
					out.Educations = (out.Educations)[:0]
				}
				for !in.IsDelim(']') {
					var v19 models.Education
					(v19).UnmarshalEasyJSON(in)
					out.Educations = append(out.Educations, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "custom_experience":
			if in.IsNull() {
				in.Skip()
				out.CustomExperience = nil
			} else {
				in.Delim('[')
				if out.CustomExperience == nil {
					if !in.IsDelim(']') {
						out.CustomExperience = make([]models.ExperienceCustomComp, 0, 0)
					} else {
						out.CustomExperience = []models.ExperienceCustomComp{}
					}
				} else {
					out.CustomExperience = (out.CustomExperience)[:0]
				}
				for !in.IsDelim(']') {
					var v20 models.ExperienceCustomComp
					(v20).UnmarshalEasyJSON(in)
					out.CustomExperience = append(out.CustomExperience, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_favorite":
			if in.IsNull() {
				in.Skip()
				out.IsFavorite = nil
			} else {
				if out.IsFavorite == nil {
					out.IsFavorite = new(uuid.UUID)
				}
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((*out.IsFavorite).UnmarshalText(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComGoParkMailRu20202MVVMGitModelsResume2(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"resume\":"
		out.RawString(prefix[1:])
		(in.Resume).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"education\":"
		out.RawString(prefix)
		if in.Educations == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v21, v22 := range in.Educations {
				if v21 > 0 {
					out.RawByte(',')
				}
				(v22).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"custom_experience\":"
		out.RawString(prefix)
		if in.CustomExperience == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.CustomExperience {
				if v23 > 0 {
					out.RawByte(',')
				}
				(v24).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"is_favorite\":"
		out.RawString(prefix)
		if in.IsFavorite == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.IsFavorite).MarshalText())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Response) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComGoParkMailRu20202MVVMGitModelsResume2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComGoParkMailRu20202MVVMGitModelsResume2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Response) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComGoParkMailRu20202MVVMGitModelsResume2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComGoParkMailRu20202MVVMGitModelsResume2(l, v)
}
