// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package response

import (
	json "encoding/json"
	models "github.com/go-park-mail-ru/2020_2_MVVM.git/models/models"
	uuid "github.com/google/uuid"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson56de76c1DecodeGithubComGoParkMailRu20202MVVMGitApplicationResponse(in *jlexer.Lexer, out *RespNotifications) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "unread_resp":
			if in.IsNull() {
				in.Skip()
				out.UnreadResp = nil
			} else {
				in.Delim('[')
				if out.UnreadResp == nil {
					if !in.IsDelim(']') {
						out.UnreadResp = make([]models.ResponseWithTitle, 0, 0)
					} else {
						out.UnreadResp = []models.ResponseWithTitle{}
					}
				} else {
					out.UnreadResp = (out.UnreadResp)[:0]
				}
				for !in.IsDelim(']') {
					var v1 models.ResponseWithTitle
					(v1).UnmarshalEasyJSON(in)
					out.UnreadResp = append(out.UnreadResp, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "unread_resp_cnt":
			out.UnreadRespCnt = uint(in.Uint())
		case "recommended_vac":
			if in.IsNull() {
				in.Skip()
				out.RecommendedVac = nil
			} else {
				in.Delim('[')
				if out.RecommendedVac == nil {
					if !in.IsDelim(']') {
						out.RecommendedVac = make([]models.Vacancy, 0, 0)
					} else {
						out.RecommendedVac = []models.Vacancy{}
					}
				} else {
					out.RecommendedVac = (out.RecommendedVac)[:0]
				}
				for !in.IsDelim(']') {
					var v2 models.Vacancy
					(v2).UnmarshalEasyJSON(in)
					out.RecommendedVac = append(out.RecommendedVac, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "recommended_vac_cnt":
			out.RecommendedVacCnt = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComGoParkMailRu20202MVVMGitApplicationResponse(out *jwriter.Writer, in RespNotifications) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"unread_resp\":"
		out.RawString(prefix[1:])
		if in.UnreadResp == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.UnreadResp {
				if v3 > 0 {
					out.RawByte(',')
				}
				(v4).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"unread_resp_cnt\":"
		out.RawString(prefix)
		out.Uint(uint(in.UnreadRespCnt))
	}
	{
		const prefix string = ",\"recommended_vac\":"
		out.RawString(prefix)
		if in.RecommendedVac == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.RecommendedVac {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"recommended_vac_cnt\":"
		out.RawString(prefix)
		out.Uint(uint(in.RecommendedVacCnt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespNotifications) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComGoParkMailRu20202MVVMGitApplicationResponse(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespNotifications) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComGoParkMailRu20202MVVMGitApplicationResponse(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespNotifications) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComGoParkMailRu20202MVVMGitApplicationResponse(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespNotifications) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComGoParkMailRu20202MVVMGitApplicationResponse(l, v)
}
func easyjson56de76c1DecodeGithubComGoParkMailRu20202MVVMGitApplicationResponse1(in *jlexer.Lexer, out *ReqNotify) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vac_in_last_n_days":
			if in.IsNull() {
				in.Skip()
				out.VacInLastNDays = nil
			} else {
				if out.VacInLastNDays == nil {
					out.VacInLastNDays = new(int)
				}
				*out.VacInLastNDays = int(in.Int())
			}
		case "only_new_vac_cnt":
			out.OnlyVacCnt = bool(in.Bool())
		case "vac_list_start":
			out.ListStart = uint(in.Uint())
		case "vac_list_limit":
			out.ListEnd = uint(in.Uint())
		case "watched_responses":
			if in.IsNull() {
				in.Skip()
				out.NewRespNotifications = nil
			} else {
				in.Delim('[')
				if out.NewRespNotifications == nil {
					if !in.IsDelim(']') {
						out.NewRespNotifications = make([]uuid.UUID, 0, 4)
					} else {
						out.NewRespNotifications = []uuid.UUID{}
					}
				} else {
					out.NewRespNotifications = (out.NewRespNotifications)[:0]
				}
				for !in.IsDelim(']') {
					var v7 uuid.UUID
					if data := in.UnsafeBytes(); in.Ok() {
						in.AddError((v7).UnmarshalText(data))
					}
					out.NewRespNotifications = append(out.NewRespNotifications, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "only_new_resp_cnt":
			out.OnlyRespCnt = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComGoParkMailRu20202MVVMGitApplicationResponse1(out *jwriter.Writer, in ReqNotify) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"vac_in_last_n_days\":"
		out.RawString(prefix[1:])
		if in.VacInLastNDays == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.VacInLastNDays))
		}
	}
	{
		const prefix string = ",\"only_new_vac_cnt\":"
		out.RawString(prefix)
		out.Bool(bool(in.OnlyVacCnt))
	}
	{
		const prefix string = ",\"vac_list_start\":"
		out.RawString(prefix)
		out.Uint(uint(in.ListStart))
	}
	{
		const prefix string = ",\"vac_list_limit\":"
		out.RawString(prefix)
		out.Uint(uint(in.ListEnd))
	}
	{
		const prefix string = ",\"watched_responses\":"
		out.RawString(prefix)
		if in.NewRespNotifications == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.NewRespNotifications {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.RawText((v9).MarshalText())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"only_new_resp_cnt\":"
		out.RawString(prefix)
		out.Bool(bool(in.OnlyRespCnt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReqNotify) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComGoParkMailRu20202MVVMGitApplicationResponse1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReqNotify) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComGoParkMailRu20202MVVMGitApplicationResponse1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReqNotify) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComGoParkMailRu20202MVVMGitApplicationResponse1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReqNotify) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComGoParkMailRu20202MVVMGitApplicationResponse1(l, v)
}
