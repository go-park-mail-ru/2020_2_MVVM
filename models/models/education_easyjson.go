// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE2be3490DecodeGithubComGoParkMailRu20202MVVMGitApplicationModels(in *jlexer.Lexer, out *Education) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.EdId).UnmarshalText(data))
			}
		case "cand_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.CandID).UnmarshalText(data))
			}
		case "resume_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ResumeId).UnmarshalText(data))
			}
		case "university":
			out.University = string(in.String())
		case "level":
			if in.IsNull() {
				in.Skip()
				out.Level = nil
			} else {
				if out.Level == nil {
					out.Level = new(string)
				}
				*out.Level = string(in.String())
			}
		case "begin":
			if in.IsNull() {
				in.Skip()
				out.Begin = nil
			} else {
				if out.Begin == nil {
					out.Begin = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Begin).UnmarshalJSON(data))
				}
			}
		case "finish":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Finish).UnmarshalJSON(data))
			}
		case "department":
			if in.IsNull() {
				in.Skip()
				out.Department = nil
			} else {
				if out.Department == nil {
					out.Department = new(string)
				}
				*out.Department = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE2be3490EncodeGithubComGoParkMailRu20202MVVMGitApplicationModels(out *jwriter.Writer, in Education) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.EdId).MarshalText())
	}
	{
		const prefix string = ",\"cand_id\":"
		out.RawString(prefix)
		out.RawText((in.CandID).MarshalText())
	}
	{
		const prefix string = ",\"resume_id\":"
		out.RawString(prefix)
		out.RawText((in.ResumeId).MarshalText())
	}
	{
		const prefix string = ",\"university\":"
		out.RawString(prefix)
		out.String(string(in.University))
	}
	{
		const prefix string = ",\"level\":"
		out.RawString(prefix)
		if in.Level == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Level))
		}
	}
	{
		const prefix string = ",\"begin\":"
		out.RawString(prefix)
		if in.Begin == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Begin).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"finish\":"
		out.RawString(prefix)
		out.Raw((in.Finish).MarshalJSON())
	}
	{
		const prefix string = ",\"department\":"
		out.RawString(prefix)
		if in.Department == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Department))
		}
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		if in.Description == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Description))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Education) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE2be3490EncodeGithubComGoParkMailRu20202MVVMGitApplicationModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Education) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE2be3490EncodeGithubComGoParkMailRu20202MVVMGitApplicationModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Education) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE2be3490DecodeGithubComGoParkMailRu20202MVVMGitApplicationModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Education) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE2be3490DecodeGithubComGoParkMailRu20202MVVMGitApplicationModels(l, v)
}
