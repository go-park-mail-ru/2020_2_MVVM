// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson80a4d695DecodeGithubComGoParkMailRu20202MVVMGitModelsModels(in *jlexer.Lexer, out *VacancySearchParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "keywords":
			out.KeyWords = string(in.String())
		case "salary_min":
			out.SalaryMin = int(in.Int())
		case "salary_max":
			out.SalaryMax = int(in.Int())
		case "gender":
			out.Gender = string(in.String())
		case "experience_month":
			if in.IsNull() {
				in.Skip()
				out.ExperienceMonth = nil
			} else {
				in.Delim('[')
				if out.ExperienceMonth == nil {
					if !in.IsDelim(']') {
						out.ExperienceMonth = make([]int, 0, 8)
					} else {
						out.ExperienceMonth = []int{}
					}
				} else {
					out.ExperienceMonth = (out.ExperienceMonth)[:0]
				}
				for !in.IsDelim(']') {
					var v1 int
					v1 = int(in.Int())
					out.ExperienceMonth = append(out.ExperienceMonth, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "employment":
			if in.IsNull() {
				in.Skip()
				out.Employment = nil
			} else {
				in.Delim('[')
				if out.Employment == nil {
					if !in.IsDelim(']') {
						out.Employment = make([]string, 0, 4)
					} else {
						out.Employment = []string{}
					}
				} else {
					out.Employment = (out.Employment)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Employment = append(out.Employment, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "education_level":
			if in.IsNull() {
				in.Skip()
				out.EducationLevel = nil
			} else {
				in.Delim('[')
				if out.EducationLevel == nil {
					if !in.IsDelim(']') {
						out.EducationLevel = make([]string, 0, 4)
					} else {
						out.EducationLevel = []string{}
					}
				} else {
					out.EducationLevel = (out.EducationLevel)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.EducationLevel = append(out.EducationLevel, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "career_level":
			if in.IsNull() {
				in.Skip()
				out.CareerLevel = nil
			} else {
				in.Delim('[')
				if out.CareerLevel == nil {
					if !in.IsDelim(']') {
						out.CareerLevel = make([]string, 0, 4)
					} else {
						out.CareerLevel = []string{}
					}
				} else {
					out.CareerLevel = (out.CareerLevel)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.CareerLevel = append(out.CareerLevel, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sphere":
			if in.IsNull() {
				in.Skip()
				out.Sphere = nil
			} else {
				in.Delim('[')
				if out.Sphere == nil {
					if !in.IsDelim(']') {
						out.Sphere = make([]int, 0, 8)
					} else {
						out.Sphere = []int{}
					}
				} else {
					out.Sphere = (out.Sphere)[:0]
				}
				for !in.IsDelim(']') {
					var v5 int
					v5 = int(in.Int())
					out.Sphere = append(out.Sphere, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "area_search":
			if in.IsNull() {
				in.Skip()
				out.AreaSearch = nil
			} else {
				in.Delim('[')
				if out.AreaSearch == nil {
					if !in.IsDelim(']') {
						out.AreaSearch = make([]string, 0, 4)
					} else {
						out.AreaSearch = []string{}
					}
				} else {
					out.AreaSearch = (out.AreaSearch)[:0]
				}
				for !in.IsDelim(']') {
					var v6 string
					v6 = string(in.String())
					out.AreaSearch = append(out.AreaSearch, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "order_by":
			out.OrderBy = string(in.String())
		case "byAsc":
			out.ByAsc = bool(in.Bool())
		case "days_from_now":
			out.DaysFromNow = int(in.Int())
		case "start_date":
			out.StartDate = string(in.String())
		case "keywordsGeo":
			out.KeywordsGeo = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson80a4d695EncodeGithubComGoParkMailRu20202MVVMGitModelsModels(out *jwriter.Writer, in VacancySearchParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"keywords\":"
		out.RawString(prefix[1:])
		out.String(string(in.KeyWords))
	}
	{
		const prefix string = ",\"salary_min\":"
		out.RawString(prefix)
		out.Int(int(in.SalaryMin))
	}
	{
		const prefix string = ",\"salary_max\":"
		out.RawString(prefix)
		out.Int(int(in.SalaryMax))
	}
	{
		const prefix string = ",\"gender\":"
		out.RawString(prefix)
		out.String(string(in.Gender))
	}
	{
		const prefix string = ",\"experience_month\":"
		out.RawString(prefix)
		if in.ExperienceMonth == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.ExperienceMonth {
				if v7 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v8))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"employment\":"
		out.RawString(prefix)
		if in.Employment == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Employment {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.String(string(v10))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"education_level\":"
		out.RawString(prefix)
		if in.EducationLevel == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.EducationLevel {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"career_level\":"
		out.RawString(prefix)
		if in.CareerLevel == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.CareerLevel {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.String(string(v14))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"sphere\":"
		out.RawString(prefix)
		if in.Sphere == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.Sphere {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v16))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"area_search\":"
		out.RawString(prefix)
		if in.AreaSearch == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.AreaSearch {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"order_by\":"
		out.RawString(prefix)
		out.String(string(in.OrderBy))
	}
	{
		const prefix string = ",\"byAsc\":"
		out.RawString(prefix)
		out.Bool(bool(in.ByAsc))
	}
	{
		const prefix string = ",\"days_from_now\":"
		out.RawString(prefix)
		out.Int(int(in.DaysFromNow))
	}
	{
		const prefix string = ",\"start_date\":"
		out.RawString(prefix)
		out.String(string(in.StartDate))
	}
	{
		const prefix string = ",\"keywordsGeo\":"
		out.RawString(prefix)
		out.String(string(in.KeywordsGeo))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VacancySearchParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson80a4d695EncodeGithubComGoParkMailRu20202MVVMGitModelsModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VacancySearchParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson80a4d695EncodeGithubComGoParkMailRu20202MVVMGitModelsModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VacancySearchParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson80a4d695DecodeGithubComGoParkMailRu20202MVVMGitModelsModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VacancySearchParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson80a4d695DecodeGithubComGoParkMailRu20202MVVMGitModelsModels(l, v)
}
func easyjson80a4d695DecodeGithubComGoParkMailRu20202MVVMGitModelsModels1(in *jlexer.Lexer, out *Vacancy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vac_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "empl_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.EmpID).UnmarshalText(data))
			}
		case "comp_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.CompID).UnmarshalText(data))
			}
		case "title":
			out.Title = string(in.String())
		case "gender":
			out.Gender = string(in.String())
		case "salary_min":
			out.SalaryMin = int(in.Int())
		case "salary_max":
			out.SalaryMax = int(in.Int())
		case "description":
			out.Description = string(in.String())
		case "requirements":
			out.Requirements = string(in.String())
		case "duties":
			out.Duties = string(in.String())
		case "skills":
			out.Skills = string(in.String())
		case "sphere":
			out.Sphere = int(in.Int())
		case "employment":
			out.Employment = string(in.String())
		case "experience_month":
			out.ExperienceMonth = int(in.Int())
		case "area_search":
			out.AreaSearch = string(in.String())
		case "location":
			out.Location = string(in.String())
		case "career_level":
			out.CareerLevel = string(in.String())
		case "education_level":
			out.EducationLevel = string(in.String())
		case "date_create":
			out.DateCreate = string(in.String())
		case "email":
			out.EmpEmail = string(in.String())
		case "phone":
			out.EmpPhone = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson80a4d695EncodeGithubComGoParkMailRu20202MVVMGitModelsModels1(out *jwriter.Writer, in Vacancy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"vac_id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"empl_id\":"
		out.RawString(prefix)
		out.RawText((in.EmpID).MarshalText())
	}
	{
		const prefix string = ",\"comp_id\":"
		out.RawString(prefix)
		out.RawText((in.CompID).MarshalText())
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"gender\":"
		out.RawString(prefix)
		out.String(string(in.Gender))
	}
	{
		const prefix string = ",\"salary_min\":"
		out.RawString(prefix)
		out.Int(int(in.SalaryMin))
	}
	{
		const prefix string = ",\"salary_max\":"
		out.RawString(prefix)
		out.Int(int(in.SalaryMax))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"requirements\":"
		out.RawString(prefix)
		out.String(string(in.Requirements))
	}
	{
		const prefix string = ",\"duties\":"
		out.RawString(prefix)
		out.String(string(in.Duties))
	}
	{
		const prefix string = ",\"skills\":"
		out.RawString(prefix)
		out.String(string(in.Skills))
	}
	{
		const prefix string = ",\"sphere\":"
		out.RawString(prefix)
		out.Int(int(in.Sphere))
	}
	{
		const prefix string = ",\"employment\":"
		out.RawString(prefix)
		out.String(string(in.Employment))
	}
	{
		const prefix string = ",\"experience_month\":"
		out.RawString(prefix)
		out.Int(int(in.ExperienceMonth))
	}
	{
		const prefix string = ",\"area_search\":"
		out.RawString(prefix)
		out.String(string(in.AreaSearch))
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		out.String(string(in.Location))
	}
	{
		const prefix string = ",\"career_level\":"
		out.RawString(prefix)
		out.String(string(in.CareerLevel))
	}
	{
		const prefix string = ",\"education_level\":"
		out.RawString(prefix)
		out.String(string(in.EducationLevel))
	}
	{
		const prefix string = ",\"date_create\":"
		out.RawString(prefix)
		out.String(string(in.DateCreate))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.EmpEmail))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.EmpPhone))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Vacancy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson80a4d695EncodeGithubComGoParkMailRu20202MVVMGitModelsModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Vacancy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson80a4d695EncodeGithubComGoParkMailRu20202MVVMGitModelsModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Vacancy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson80a4d695DecodeGithubComGoParkMailRu20202MVVMGitModelsModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Vacancy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson80a4d695DecodeGithubComGoParkMailRu20202MVVMGitModelsModels1(l, v)
}
func easyjson80a4d695DecodeGithubComGoParkMailRu20202MVVMGitModelsModels2(in *jlexer.Lexer, out *VacTopCnt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "AllVacCnt":
			out.AllVacCnt = uint64(in.Uint64())
		case "NewVacCnt":
			out.NewVacCnt = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson80a4d695EncodeGithubComGoParkMailRu20202MVVMGitModelsModels2(out *jwriter.Writer, in VacTopCnt) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"AllVacCnt\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.AllVacCnt))
	}
	{
		const prefix string = ",\"NewVacCnt\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.NewVacCnt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VacTopCnt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson80a4d695EncodeGithubComGoParkMailRu20202MVVMGitModelsModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VacTopCnt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson80a4d695EncodeGithubComGoParkMailRu20202MVVMGitModelsModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VacTopCnt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson80a4d695DecodeGithubComGoParkMailRu20202MVVMGitModelsModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VacTopCnt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson80a4d695DecodeGithubComGoParkMailRu20202MVVMGitModelsModels2(l, v)
}
func easyjson80a4d695DecodeGithubComGoParkMailRu20202MVVMGitModelsModels3(in *jlexer.Lexer, out *ListVacancy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ListVacancy, 0, 0)
			} else {
				*out = ListVacancy{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v19 Vacancy
			(v19).UnmarshalEasyJSON(in)
			*out = append(*out, v19)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson80a4d695EncodeGithubComGoParkMailRu20202MVVMGitModelsModels3(out *jwriter.Writer, in ListVacancy) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v20, v21 := range in {
			if v20 > 0 {
				out.RawByte(',')
			}
			(v21).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ListVacancy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson80a4d695EncodeGithubComGoParkMailRu20202MVVMGitModelsModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListVacancy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson80a4d695EncodeGithubComGoParkMailRu20202MVVMGitModelsModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListVacancy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson80a4d695DecodeGithubComGoParkMailRu20202MVVMGitModelsModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListVacancy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson80a4d695DecodeGithubComGoParkMailRu20202MVVMGitModelsModels3(l, v)
}
func easyjson80a4d695DecodeGithubComGoParkMailRu20202MVVMGitModelsModels4(in *jlexer.Lexer, out *ListBriefVacancyInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ListBriefVacancyInfo, 0, 0)
			} else {
				*out = ListBriefVacancyInfo{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v22 BriefVacancyInfo
			(v22).UnmarshalEasyJSON(in)
			*out = append(*out, v22)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson80a4d695EncodeGithubComGoParkMailRu20202MVVMGitModelsModels4(out *jwriter.Writer, in ListBriefVacancyInfo) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v23, v24 := range in {
			if v23 > 0 {
				out.RawByte(',')
			}
			(v24).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ListBriefVacancyInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson80a4d695EncodeGithubComGoParkMailRu20202MVVMGitModelsModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListBriefVacancyInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson80a4d695EncodeGithubComGoParkMailRu20202MVVMGitModelsModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListBriefVacancyInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson80a4d695DecodeGithubComGoParkMailRu20202MVVMGitModelsModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListBriefVacancyInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson80a4d695DecodeGithubComGoParkMailRu20202MVVMGitModelsModels4(l, v)
}
func easyjson80a4d695DecodeGithubComGoParkMailRu20202MVVMGitModelsModels5(in *jlexer.Lexer, out *BriefVacancyInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "avatar":
			out.Avatar = string(in.String())
		case "vacancy_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.VacancyID).UnmarshalText(data))
			}
		case "empl_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.EmplId).UnmarshalText(data))
			}
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "place":
			out.Place = string(in.String())
		case "location":
			out.AreaSearch = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson80a4d695EncodeGithubComGoParkMailRu20202MVVMGitModelsModels5(out *jwriter.Writer, in BriefVacancyInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix[1:])
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"vacancy_id\":"
		out.RawString(prefix)
		out.RawText((in.VacancyID).MarshalText())
	}
	{
		const prefix string = ",\"empl_id\":"
		out.RawString(prefix)
		out.RawText((in.EmplId).MarshalText())
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"place\":"
		out.RawString(prefix)
		out.String(string(in.Place))
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		out.String(string(in.AreaSearch))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BriefVacancyInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson80a4d695EncodeGithubComGoParkMailRu20202MVVMGitModelsModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BriefVacancyInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson80a4d695EncodeGithubComGoParkMailRu20202MVVMGitModelsModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BriefVacancyInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson80a4d695DecodeGithubComGoParkMailRu20202MVVMGitModelsModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BriefVacancyInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson80a4d695DecodeGithubComGoParkMailRu20202MVVMGitModelsModels5(l, v)
}
