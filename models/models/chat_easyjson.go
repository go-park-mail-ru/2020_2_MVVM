// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9b8f5552DecodeGithubComGoParkMailRu20202MVVMGitModelsModels(in *jlexer.Lexer, out *TechMessageBrief) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "date_create":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateCreate).UnmarshalJSON(data))
			}
		case "resume_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ResumeID).UnmarshalText(data))
			}
		case "resume_title":
			out.ResumeTitle = string(in.String())
		case "company_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.CompanyID).UnmarshalText(data))
			}
		case "company_name":
			out.CompanyName = string(in.String())
		case "vacancy_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.VacancyID).UnmarshalText(data))
			}
		case "vacancy_title":
			out.VacancyTitle = string(in.String())
		case "response_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ResponseID).UnmarshalText(data))
			}
		case "response_initial":
			out.ResponseInitial = string(in.String())
		case "response_status":
			out.ResponseStatus = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20202MVVMGitModelsModels(out *jwriter.Writer, in TechMessageBrief) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"date_create\":"
		out.RawString(prefix[1:])
		out.Raw((in.DateCreate).MarshalJSON())
	}
	{
		const prefix string = ",\"resume_id\":"
		out.RawString(prefix)
		out.RawText((in.ResumeID).MarshalText())
	}
	{
		const prefix string = ",\"resume_title\":"
		out.RawString(prefix)
		out.String(string(in.ResumeTitle))
	}
	{
		const prefix string = ",\"company_id\":"
		out.RawString(prefix)
		out.RawText((in.CompanyID).MarshalText())
	}
	{
		const prefix string = ",\"company_name\":"
		out.RawString(prefix)
		out.String(string(in.CompanyName))
	}
	{
		const prefix string = ",\"vacancy_id\":"
		out.RawString(prefix)
		out.RawText((in.VacancyID).MarshalText())
	}
	{
		const prefix string = ",\"vacancy_title\":"
		out.RawString(prefix)
		out.String(string(in.VacancyTitle))
	}
	{
		const prefix string = ",\"response_id\":"
		out.RawString(prefix)
		out.RawText((in.ResponseID).MarshalText())
	}
	{
		const prefix string = ",\"response_initial\":"
		out.RawString(prefix)
		out.String(string(in.ResponseInitial))
	}
	{
		const prefix string = ",\"response_status\":"
		out.RawString(prefix)
		out.String(string(in.ResponseStatus))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TechMessageBrief) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubComGoParkMailRu20202MVVMGitModelsModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TechMessageBrief) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubComGoParkMailRu20202MVVMGitModelsModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TechMessageBrief) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubComGoParkMailRu20202MVVMGitModelsModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TechMessageBrief) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubComGoParkMailRu20202MVVMGitModelsModels(l, v)
}
func easyjson9b8f5552DecodeGithubComGoParkMailRu20202MVVMGitModelsModels1(in *jlexer.Lexer, out *MessageBrief) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sender":
			out.Sender = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "is_read":
			out.IsRead = bool(in.Bool())
		case "date_create":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateCreate).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20202MVVMGitModelsModels1(out *jwriter.Writer, in MessageBrief) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sender\":"
		out.RawString(prefix[1:])
		out.String(string(in.Sender))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"is_read\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsRead))
	}
	{
		const prefix string = ",\"date_create\":"
		out.RawString(prefix)
		out.Raw((in.DateCreate).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageBrief) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubComGoParkMailRu20202MVVMGitModelsModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageBrief) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubComGoParkMailRu20202MVVMGitModelsModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageBrief) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubComGoParkMailRu20202MVVMGitModelsModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageBrief) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubComGoParkMailRu20202MVVMGitModelsModels1(l, v)
}
func easyjson9b8f5552DecodeGithubComGoParkMailRu20202MVVMGitModelsModels2(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.MessageID).UnmarshalText(data))
			}
		case "chat_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ChatID).UnmarshalText(data))
			}
		case "sender":
			out.Sender = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "is_read":
			out.IsRead = bool(in.Bool())
		case "date_create":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateCreate).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20202MVVMGitModelsModels2(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message_id\":"
		out.RawString(prefix[1:])
		out.RawText((in.MessageID).MarshalText())
	}
	{
		const prefix string = ",\"chat_id\":"
		out.RawString(prefix)
		out.RawText((in.ChatID).MarshalText())
	}
	{
		const prefix string = ",\"sender\":"
		out.RawString(prefix)
		out.String(string(in.Sender))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"is_read\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsRead))
	}
	{
		const prefix string = ",\"date_create\":"
		out.RawString(prefix)
		out.Raw((in.DateCreate).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubComGoParkMailRu20202MVVMGitModelsModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubComGoParkMailRu20202MVVMGitModelsModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubComGoParkMailRu20202MVVMGitModelsModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubComGoParkMailRu20202MVVMGitModelsModels2(l, v)
}
func easyjson9b8f5552DecodeGithubComGoParkMailRu20202MVVMGitModelsModels3(in *jlexer.Lexer, out *ListChatSummary) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ListChatSummary, 0, 0)
			} else {
				*out = ListChatSummary{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 ChatSummary
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20202MVVMGitModelsModels3(out *jwriter.Writer, in ListChatSummary) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ListChatSummary) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubComGoParkMailRu20202MVVMGitModelsModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListChatSummary) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubComGoParkMailRu20202MVVMGitModelsModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListChatSummary) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubComGoParkMailRu20202MVVMGitModelsModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListChatSummary) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubComGoParkMailRu20202MVVMGitModelsModels3(l, v)
}
func easyjson9b8f5552DecodeGithubComGoParkMailRu20202MVVMGitModelsModels4(in *jlexer.Lexer, out *ChatSummary) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ChatID).UnmarshalText(data))
			}
		case "total_unread":
			out.TotalUnread = uint(in.Uint())
		case "name":
			out.Name = string(in.String())
		case "surname":
			out.Surname = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "message":
			if m, ok := out.Message.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Message.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Message = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20202MVVMGitModelsModels4(out *jwriter.Writer, in ChatSummary) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chat_id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ChatID).MarshalText())
	}
	{
		const prefix string = ",\"total_unread\":"
		out.RawString(prefix)
		out.Uint(uint(in.TotalUnread))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"surname\":"
		out.RawString(prefix)
		out.String(string(in.Surname))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		if m, ok := in.Message.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Message.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Message))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChatSummary) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubComGoParkMailRu20202MVVMGitModelsModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChatSummary) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubComGoParkMailRu20202MVVMGitModelsModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChatSummary) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubComGoParkMailRu20202MVVMGitModelsModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChatSummary) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubComGoParkMailRu20202MVVMGitModelsModels4(l, v)
}
func easyjson9b8f5552DecodeGithubComGoParkMailRu20202MVVMGitModelsModels5(in *jlexer.Lexer, out *ChatHistory) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ChatID).UnmarshalText(data))
			}
		case "technical_messages":
			if in.IsNull() {
				in.Skip()
				out.TechnicalMessages = nil
			} else {
				in.Delim('[')
				if out.TechnicalMessages == nil {
					if !in.IsDelim(']') {
						out.TechnicalMessages = make([]TechMessageBrief, 0, 0)
					} else {
						out.TechnicalMessages = []TechMessageBrief{}
					}
				} else {
					out.TechnicalMessages = (out.TechnicalMessages)[:0]
				}
				for !in.IsDelim(']') {
					var v4 TechMessageBrief
					(v4).UnmarshalEasyJSON(in)
					out.TechnicalMessages = append(out.TechnicalMessages, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "dialog":
			if in.IsNull() {
				in.Skip()
				out.Dialog = nil
			} else {
				in.Delim('[')
				if out.Dialog == nil {
					if !in.IsDelim(']') {
						out.Dialog = make([]MessageBrief, 0, 1)
					} else {
						out.Dialog = []MessageBrief{}
					}
				} else {
					out.Dialog = (out.Dialog)[:0]
				}
				for !in.IsDelim(']') {
					var v5 MessageBrief
					(v5).UnmarshalEasyJSON(in)
					out.Dialog = append(out.Dialog, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20202MVVMGitModelsModels5(out *jwriter.Writer, in ChatHistory) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chat_id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ChatID).MarshalText())
	}
	{
		const prefix string = ",\"technical_messages\":"
		out.RawString(prefix)
		if in.TechnicalMessages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.TechnicalMessages {
				if v6 > 0 {
					out.RawByte(',')
				}
				(v7).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"dialog\":"
		out.RawString(prefix)
		if in.Dialog == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Dialog {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChatHistory) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubComGoParkMailRu20202MVVMGitModelsModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChatHistory) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubComGoParkMailRu20202MVVMGitModelsModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChatHistory) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubComGoParkMailRu20202MVVMGitModelsModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChatHistory) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubComGoParkMailRu20202MVVMGitModelsModels5(l, v)
}
func easyjson9b8f5552DecodeGithubComGoParkMailRu20202MVVMGitModelsModels6(in *jlexer.Lexer, out *Chat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ChatID).UnmarshalText(data))
			}
		case "response_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ResponseID).UnmarshalText(data))
			}
		case "cand_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.CandID).UnmarshalText(data))
			}
		case "empl_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.EmplID).UnmarshalText(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20202MVVMGitModelsModels6(out *jwriter.Writer, in Chat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chat_id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ChatID).MarshalText())
	}
	{
		const prefix string = ",\"response_id\":"
		out.RawString(prefix)
		out.RawText((in.ResponseID).MarshalText())
	}
	{
		const prefix string = ",\"cand_id\":"
		out.RawString(prefix)
		out.RawText((in.CandID).MarshalText())
	}
	{
		const prefix string = ",\"empl_id\":"
		out.RawString(prefix)
		out.RawText((in.EmplID).MarshalText())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Chat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubComGoParkMailRu20202MVVMGitModelsModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Chat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubComGoParkMailRu20202MVVMGitModelsModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Chat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubComGoParkMailRu20202MVVMGitModelsModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Chat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubComGoParkMailRu20202MVVMGitModelsModels6(l, v)
}
