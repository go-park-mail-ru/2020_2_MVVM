// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	pq "github.com/lib/pq"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4b608a57DecodeGithubComGoParkMailRu20202MVVMGitModelsModels(in *jlexer.Lexer, out *RespList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "companyList":
			if in.IsNull() {
				in.Skip()
				out.Companies = nil
			} else {
				in.Delim('[')
				if out.Companies == nil {
					if !in.IsDelim(']') {
						out.Companies = make([]OfficialCompany, 0, 0)
					} else {
						out.Companies = []OfficialCompany{}
					}
				} else {
					out.Companies = (out.Companies)[:0]
				}
				for !in.IsDelim(']') {
					var v1 OfficialCompany
					(v1).UnmarshalEasyJSON(in)
					out.Companies = append(out.Companies, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4b608a57EncodeGithubComGoParkMailRu20202MVVMGitModelsModels(out *jwriter.Writer, in RespList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"companyList\":"
		out.RawString(prefix[1:])
		if in.Companies == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Companies {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4b608a57EncodeGithubComGoParkMailRu20202MVVMGitModelsModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4b608a57EncodeGithubComGoParkMailRu20202MVVMGitModelsModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4b608a57DecodeGithubComGoParkMailRu20202MVVMGitModelsModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4b608a57DecodeGithubComGoParkMailRu20202MVVMGitModelsModels(l, v)
}
func easyjson4b608a57DecodeGithubComGoParkMailRu20202MVVMGitModelsModels1(in *jlexer.Lexer, out *Resp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "company":
			if in.IsNull() {
				in.Skip()
				out.Company = nil
			} else {
				if out.Company == nil {
					out.Company = new(OfficialCompany)
				}
				(*out.Company).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4b608a57EncodeGithubComGoParkMailRu20202MVVMGitModelsModels1(out *jwriter.Writer, in Resp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"company\":"
		out.RawString(prefix[1:])
		if in.Company == nil {
			out.RawString("null")
		} else {
			(*in.Company).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Resp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4b608a57EncodeGithubComGoParkMailRu20202MVVMGitModelsModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Resp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4b608a57EncodeGithubComGoParkMailRu20202MVVMGitModelsModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Resp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4b608a57DecodeGithubComGoParkMailRu20202MVVMGitModelsModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Resp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4b608a57DecodeGithubComGoParkMailRu20202MVVMGitModelsModels1(l, v)
}
func easyjson4b608a57DecodeGithubComGoParkMailRu20202MVVMGitModelsModels2(in *jlexer.Lexer, out *ReqComp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "spheres":
			if in.IsNull() {
				in.Skip()
				out.Spheres = nil
			} else {
				in.Delim('[')
				if out.Spheres == nil {
					if !in.IsDelim(']') {
						out.Spheres = make([]int, 0, 8)
					} else {
						out.Spheres = []int{}
					}
				} else {
					out.Spheres = (out.Spheres)[:0]
				}
				for !in.IsDelim(']') {
					var v4 int
					v4 = int(in.Int())
					out.Spheres = append(out.Spheres, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "area_search":
			out.AreaSearch = string(in.String())
		case "link":
			out.Link = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4b608a57EncodeGithubComGoParkMailRu20202MVVMGitModelsModels2(out *jwriter.Writer, in ReqComp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"spheres\":"
		out.RawString(prefix)
		if in.Spheres == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Spheres {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"area_search\":"
		out.RawString(prefix)
		out.String(string(in.AreaSearch))
	}
	{
		const prefix string = ",\"link\":"
		out.RawString(prefix)
		out.String(string(in.Link))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReqComp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4b608a57EncodeGithubComGoParkMailRu20202MVVMGitModelsModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReqComp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4b608a57EncodeGithubComGoParkMailRu20202MVVMGitModelsModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReqComp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4b608a57DecodeGithubComGoParkMailRu20202MVVMGitModelsModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReqComp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4b608a57DecodeGithubComGoParkMailRu20202MVVMGitModelsModels2(l, v)
}
func easyjson4b608a57DecodeGithubComGoParkMailRu20202MVVMGitModelsModels3(in *jlexer.Lexer, out *OfficialCompany) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "name":
			out.Name = string(in.String())
		case "sphere":
			if in.IsNull() {
				in.Skip()
				out.Spheres = nil
			} else {
				in.Delim('[')
				if out.Spheres == nil {
					if !in.IsDelim(']') {
						out.Spheres = make(pq.Int64Array, 0, 8)
					} else {
						out.Spheres = pq.Int64Array{}
					}
				} else {
					out.Spheres = (out.Spheres)[:0]
				}
				for !in.IsDelim(']') {
					var v7 int64
					v7 = int64(in.Int64())
					out.Spheres = append(out.Spheres, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "description":
			out.Description = string(in.String())
		case "area_search":
			out.AreaSearch = string(in.String())
		case "link":
			out.Link = string(in.String())
		case "vac_count":
			out.VacCount = int(in.Int())
		case "avatar":
			out.Avatar = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4b608a57EncodeGithubComGoParkMailRu20202MVVMGitModelsModels3(out *jwriter.Writer, in OfficialCompany) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"sphere\":"
		out.RawString(prefix)
		if in.Spheres == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Spheres {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"area_search\":"
		out.RawString(prefix)
		out.String(string(in.AreaSearch))
	}
	{
		const prefix string = ",\"link\":"
		out.RawString(prefix)
		out.String(string(in.Link))
	}
	{
		const prefix string = ",\"vac_count\":"
		out.RawString(prefix)
		out.Int(int(in.VacCount))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OfficialCompany) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4b608a57EncodeGithubComGoParkMailRu20202MVVMGitModelsModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OfficialCompany) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4b608a57EncodeGithubComGoParkMailRu20202MVVMGitModelsModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OfficialCompany) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4b608a57DecodeGithubComGoParkMailRu20202MVVMGitModelsModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OfficialCompany) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4b608a57DecodeGithubComGoParkMailRu20202MVVMGitModelsModels3(l, v)
}
func easyjson4b608a57DecodeGithubComGoParkMailRu20202MVVMGitModelsModels4(in *jlexer.Lexer, out *CompanySearchParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "keywords":
			out.KeyWords = string(in.String())
		case "area_search":
			if in.IsNull() {
				in.Skip()
				out.AreaSearch = nil
			} else {
				in.Delim('[')
				if out.AreaSearch == nil {
					if !in.IsDelim(']') {
						out.AreaSearch = make([]string, 0, 4)
					} else {
						out.AreaSearch = []string{}
					}
				} else {
					out.AreaSearch = (out.AreaSearch)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.AreaSearch = append(out.AreaSearch, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sphere":
			if in.IsNull() {
				in.Skip()
				out.Sphere = nil
			} else {
				in.Delim('[')
				if out.Sphere == nil {
					if !in.IsDelim(']') {
						out.Sphere = make([]int, 0, 8)
					} else {
						out.Sphere = []int{}
					}
				} else {
					out.Sphere = (out.Sphere)[:0]
				}
				for !in.IsDelim(']') {
					var v11 int
					v11 = int(in.Int())
					out.Sphere = append(out.Sphere, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "order_by":
			out.OrderBy = string(in.String())
		case "byAsc":
			out.ByAsc = bool(in.Bool())
		case "vac_count":
			out.VacCount = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4b608a57EncodeGithubComGoParkMailRu20202MVVMGitModelsModels4(out *jwriter.Writer, in CompanySearchParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"keywords\":"
		out.RawString(prefix[1:])
		out.String(string(in.KeyWords))
	}
	{
		const prefix string = ",\"area_search\":"
		out.RawString(prefix)
		if in.AreaSearch == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.AreaSearch {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.String(string(v13))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"sphere\":"
		out.RawString(prefix)
		if in.Sphere == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Sphere {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v15))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"order_by\":"
		out.RawString(prefix)
		out.String(string(in.OrderBy))
	}
	{
		const prefix string = ",\"byAsc\":"
		out.RawString(prefix)
		out.Bool(bool(in.ByAsc))
	}
	{
		const prefix string = ",\"vac_count\":"
		out.RawString(prefix)
		out.Int(int(in.VacCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CompanySearchParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4b608a57EncodeGithubComGoParkMailRu20202MVVMGitModelsModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CompanySearchParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4b608a57EncodeGithubComGoParkMailRu20202MVVMGitModelsModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CompanySearchParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4b608a57DecodeGithubComGoParkMailRu20202MVVMGitModelsModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CompanySearchParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4b608a57DecodeGithubComGoParkMailRu20202MVVMGitModelsModels4(l, v)
}
