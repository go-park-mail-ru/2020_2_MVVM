// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson404e7428DecodeGithubComGoParkMailRu20202MVVMGitApplicationModels(in *jlexer.Lexer, out *FavoritesForEmpl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "favorite_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.FavoriteID).UnmarshalText(data))
			}
		case "empl_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.EmplID).UnmarshalText(data))
			}
		case "resume_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ResumeID).UnmarshalText(data))
			}
		case "Resume":
			(out.Resume).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson404e7428EncodeGithubComGoParkMailRu20202MVVMGitApplicationModels(out *jwriter.Writer, in FavoritesForEmpl) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"favorite_id\":"
		out.RawString(prefix[1:])
		out.RawText((in.FavoriteID).MarshalText())
	}
	{
		const prefix string = ",\"empl_id\":"
		out.RawString(prefix)
		out.RawText((in.EmplID).MarshalText())
	}
	{
		const prefix string = ",\"resume_id\":"
		out.RawString(prefix)
		out.RawText((in.ResumeID).MarshalText())
	}
	{
		const prefix string = ",\"Resume\":"
		out.RawString(prefix)
		(in.Resume).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FavoritesForEmpl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson404e7428EncodeGithubComGoParkMailRu20202MVVMGitApplicationModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FavoritesForEmpl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson404e7428EncodeGithubComGoParkMailRu20202MVVMGitApplicationModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FavoritesForEmpl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson404e7428DecodeGithubComGoParkMailRu20202MVVMGitApplicationModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FavoritesForEmpl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson404e7428DecodeGithubComGoParkMailRu20202MVVMGitApplicationModels(l, v)
}
func easyjson404e7428DecodeGithubComGoParkMailRu20202MVVMGitApplicationModels1(in *jlexer.Lexer, out *FavoritesForCand) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "favorite_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "cand_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.CandID).UnmarshalText(data))
			}
		case "vacancy_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.VacancyID).UnmarshalText(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson404e7428EncodeGithubComGoParkMailRu20202MVVMGitApplicationModels1(out *jwriter.Writer, in FavoritesForCand) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"favorite_id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"cand_id\":"
		out.RawString(prefix)
		out.RawText((in.CandID).MarshalText())
	}
	{
		const prefix string = ",\"vacancy_id\":"
		out.RawString(prefix)
		out.RawText((in.VacancyID).MarshalText())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FavoritesForCand) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson404e7428EncodeGithubComGoParkMailRu20202MVVMGitApplicationModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FavoritesForCand) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson404e7428EncodeGithubComGoParkMailRu20202MVVMGitApplicationModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FavoritesForCand) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson404e7428DecodeGithubComGoParkMailRu20202MVVMGitApplicationModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FavoritesForCand) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson404e7428DecodeGithubComGoParkMailRu20202MVVMGitApplicationModels1(l, v)
}
