// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	models "github.com/go-park-mail-ru/2020_2_MVVM.git/application/models"
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// Create provides a mock function with given fields: educations
func (_m *UseCase) Create(educations models.Education) (*models.Education, error) {
	ret := _m.Called(educations)

	var r0 *models.Education
	if rf, ok := ret.Get(0).(func(models.Education) *models.Education); ok {
		r0 = rf(educations)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Education)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Education) error); ok {
		r1 = rf(educations)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DropAllFromResume provides a mock function with given fields: resumeID
func (_m *UseCase) DropAllFromResume(resumeID uuid.UUID) error {
	ret := _m.Called(resumeID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(resumeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllFromResume provides a mock function with given fields: resumeID
func (_m *UseCase) GetAllFromResume(resumeID uuid.UUID) ([]models.Education, error) {
	ret := _m.Called(resumeID)

	var r0 []models.Education
	if rf, ok := ret.Get(0).(func(uuid.UUID) []models.Education); ok {
		r0 = rf(resumeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Education)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(resumeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *UseCase) GetById(id string) (*models.Education, error) {
	ret := _m.Called(id)

	var r0 *models.Education
	if rf, ok := ret.Get(0).(func(string) *models.Education); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Education)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
