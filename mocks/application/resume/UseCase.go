// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	models "github.com/go-park-mail-ru/2020_2_MVVM.git/application/models"
	resume "github.com/go-park-mail-ru/2020_2_MVVM.git/application/resume"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// AddFavorite provides a mock function with given fields: favoriteForEmpl
func (_m *UseCase) AddFavorite(favoriteForEmpl models.FavoritesForEmpl) (*models.FavoritesForEmpl, error) {
	ret := _m.Called(favoriteForEmpl)

	var r0 *models.FavoritesForEmpl
	if rf, ok := ret.Get(0).(func(models.FavoritesForEmpl) *models.FavoritesForEmpl); ok {
		r0 = rf(favoriteForEmpl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.FavoritesForEmpl)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.FavoritesForEmpl) error); ok {
		r1 = rf(favoriteForEmpl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: template
func (_m *UseCase) Create(template models.Resume) (*models.Resume, error) {
	ret := _m.Called(template)

	var r0 *models.Resume
	if rf, ok := ret.Get(0).(func(models.Resume) *models.Resume); ok {
		r0 = rf(template)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Resume)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Resume) error); ok {
		r1 = rf(template)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllEmplFavoriteResume provides a mock function with given fields: userID
func (_m *UseCase) GetAllEmplFavoriteResume(userID uuid.UUID) ([]models.BriefResumeInfo, error) {
	ret := _m.Called(userID)

	var r0 []models.BriefResumeInfo
	if rf, ok := ret.Get(0).(func(uuid.UUID) []models.BriefResumeInfo); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.BriefResumeInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUserResume provides a mock function with given fields: userid
func (_m *UseCase) GetAllUserResume(userid uuid.UUID) ([]models.BriefResumeInfo, error) {
	ret := _m.Called(userid)

	var r0 []models.BriefResumeInfo
	if rf, ok := ret.Get(0).(func(uuid.UUID) []models.BriefResumeInfo); ok {
		r0 = rf(userid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.BriefResumeInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *UseCase) GetById(id uuid.UUID) (*models.Resume, error) {
	ret := _m.Called(id)

	var r0 *models.Resume
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.Resume); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Resume)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFavoriteByID provides a mock function with given fields: favoriteID
func (_m *UseCase) GetFavoriteByID(favoriteID uuid.UUID) (*models.FavoritesForEmpl, error) {
	ret := _m.Called(favoriteID)

	var r0 *models.FavoritesForEmpl
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.FavoritesForEmpl); ok {
		r0 = rf(favoriteID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.FavoritesForEmpl)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(favoriteID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFavoriteByResume provides a mock function with given fields: userID, resumeID
func (_m *UseCase) GetFavoriteByResume(userID uuid.UUID, resumeID uuid.UUID) (*models.FavoritesForEmpl, error) {
	ret := _m.Called(userID, resumeID)

	var r0 *models.FavoritesForEmpl
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) *models.FavoritesForEmpl); ok {
		r0 = rf(userID, resumeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.FavoritesForEmpl)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(userID, resumeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: start, limit
func (_m *UseCase) List(start uint, limit uint) ([]models.BriefResumeInfo, error) {
	ret := _m.Called(start, limit)

	var r0 []models.BriefResumeInfo
	if rf, ok := ret.Get(0).(func(uint, uint) []models.BriefResumeInfo); ok {
		r0 = rf(start, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.BriefResumeInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(start, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveFavorite provides a mock function with given fields: favorite
func (_m *UseCase) RemoveFavorite(favorite models.FavoritesForEmpl) error {
	ret := _m.Called(favorite)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.FavoritesForEmpl) error); ok {
		r0 = rf(favorite)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Search provides a mock function with given fields: searchParams
func (_m *UseCase) Search(searchParams resume.SearchParams) ([]models.BriefResumeInfo, error) {
	ret := _m.Called(searchParams)

	var r0 []models.BriefResumeInfo
	if rf, ok := ret.Get(0).(func(resume.SearchParams) []models.BriefResumeInfo); ok {
		r0 = rf(searchParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.BriefResumeInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(resume.SearchParams) error); ok {
		r1 = rf(searchParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *UseCase) Update(_a0 models.Resume) (*models.Resume, error) {
	ret := _m.Called(_a0)

	var r0 *models.Resume
	if rf, ok := ret.Get(0).(func(models.Resume) *models.Resume); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Resume)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Resume) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
